version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: n8n-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.docker.compose.service=prometheus"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.2.2
    container_name: n8n-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/data/grafana:/var/lib/grafana
      - ./monitoring/config/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - n8n-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.docker.compose.service=grafana"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: n8n-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=node-exporter"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.50.0
    container_name: n8n-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=cadvisor"

  # Alertmanager for handling alerts
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: n8n-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/data/alertmanager:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=alertmanager"

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.2.0
    container_name: n8n-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/config/loki.yml:/etc/loki/local-config.yaml:ro
      - ./monitoring/data/loki:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=loki"

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:3.2.0
    container_name: n8n-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/config/promtail.yml:/etc/promtail/config.yml:ro
      - ./monitoring/logs:/var/log/n8n:ro
      - ./traefik/logs:/var/log/traefik:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - n8n-network
    depends_on:
      loki:
        condition: service_healthy
    labels:
      - "com.docker.compose.service=promtail"

  # Uptime monitoring service
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.15
    container_name: n8n-uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./monitoring/data/uptime-kuma:/app/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.docker.compose.service=uptime-kuma"

# Override main services to add monitoring labels and expose metrics
  n8n:
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=5678"
      - "prometheus.io/path=/metrics"
    environment:
      - N8N_METRICS=true
      - N8N_METRICS_PREFIX=n8n_

  postgres:
    labels:
      - "prometheus.io/scrape=false"
    # Note: For PostgreSQL metrics, consider adding postgres_exporter

  redis:
    labels:
      - "prometheus.io/scrape=false"
    # Note: For Redis metrics, consider adding redis_exporter

networks:
  n8n-network:
    external: true

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
  uptime-kuma-data:
    driver: local
