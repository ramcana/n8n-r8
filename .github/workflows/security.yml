name: Security Scan

on:
  schedule:
    # Run daily security scans
    - cron: '0 6 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build on vulnerabilities
          vuln-type: 'os,library'
          scanners: 'vuln,secret,misconfig'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      matrix:
        image:
          - n8nio/n8n:1.63.4
          - postgres:15.8-alpine3.20
          - redis:7.4.1-alpine3.20
          - nginx:1.27.2-alpine3.20
          - traefik:v3.1.6
          - prom/prometheus:v2.54.1
          - grafana/grafana:11.2.2
    steps:
      - name: Set safe filename
        id: safe-name
        run: |
          # Convert image name to safe filename by replacing special characters
          SAFE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "filename=${SAFE_NAME}" >> $GITHUB_OUTPUT
          
      - name: Run Trivy vulnerability scanner on Docker images
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          output: 'trivy-${{ steps.safe-name.outputs.filename }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build on vulnerabilities
          vuln-type: 'os,library'
          scanners: 'vuln'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ steps.safe-name.outputs.filename }}.sarif'

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        if: github.event.before != github.sha
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          extra_args: --only-verified --no-update

      - name: Skip TruffleHog if no new commits
        if: github.event.before == github.sha
        run: echo "Skipping TruffleHog scan: base and head commits are identical."

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('nodes/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking for package-lock.json in nodes directory:"
          ls -la nodes/package-lock.json
          cd nodes
          echo "Changed to directory: $(pwd)"
          npm ci

      - name: Run npm audit
        run: |
          cd nodes
          npm audit --audit-level=moderate || echo "npm audit completed with findings"

      - name: Run Snyk to check for vulnerabilities
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=nodes/package.json
      
      - name: Snyk scan skipped
        if: ${{ secrets.SNYK_TOKEN == '' }}
        run: echo "Snyk scan skipped - SNYK_TOKEN not configured"

  configuration-scan:
    name: Configuration Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install checkov
        run: |
          python -m pip install --upgrade pip
          pip install checkov

      - name: Run Checkov on Docker Compose files
        run: |
          checkov -f docker-compose.yml --framework docker-compose || echo "Checkov scan completed with findings"
          checkov -f docker-compose.nginx.yml --framework docker-compose || echo "Checkov scan completed with findings"
          checkov -f docker-compose.traefik.yml --framework docker-compose || echo "Checkov scan completed with findings"
          checkov -f docker-compose.monitoring.yml --framework docker-compose || echo "Checkov scan completed with findings"

      - name: Run Checkov on Dockerfiles
        run: |
          # Check if any Dockerfiles exist before running checkov
          if find . -name "Dockerfile*" -type f -not -path "*/node_modules/*" | grep -q .; then
            find . -name "Dockerfile*" -type f -not -path "*/node_modules/*" | xargs checkov -f --framework dockerfile
          else
            echo "No Dockerfiles found to scan"
          fi

  security-policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security files
        run: |
          echo "Checking for required security files..."
          
          # Check for SECURITY.md
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file is missing"
            exit 1
          else
            echo "✅ SECURITY.md found"
          fi
          
          # Check for LICENSE
          if [ ! -f "LICENSE" ]; then
            echo "❌ LICENSE file is missing"
            exit 1
          else
            echo "✅ LICENSE found"
          fi
          
          # Check for .env.example (should exist, .env should not)
          if [ ! -f ".env.example" ]; then
            echo "❌ .env.example file is missing"
            exit 1
          else
            echo "✅ .env.example found"
          fi
          
          if [ -f ".env" ]; then
            echo "⚠️  .env file found in repository (should be gitignored)"
            echo "This is a security risk - environment files should not be committed"
            exit 1
          else
            echo "✅ .env file not in repository"
          fi

      - name: Check for default credentials in configs
        run: |
          echo "Checking for default credentials..."
          
          # Check for common default passwords in non-example files
          if grep -r "changeme123!" --exclude="*.example" --exclude="README.md" --exclude="CHANGELOG.md" .; then
            echo "❌ Default passwords found in configuration files"
            exit 1
          else
            echo "✅ No default passwords found in configuration files"
          fi

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker Compose security best practices
        run: |
          echo "Checking Docker Compose security best practices..."
          
          # Check for pinned image versions
          if grep -r ":latest" docker-compose*.yml; then
            echo "❌ Found :latest tags in Docker Compose files"
            exit 1
          else
            echo "✅ All Docker images are pinned to specific versions"
          fi
          
          # Check for resource limits
          if ! grep -q "resources:" docker-compose.yml; then
            echo "❌ No resource limits found in main Docker Compose file"
            exit 1
          else
            echo "✅ Resource limits configured"
          fi
          
          # Check for health checks
          if ! grep -q "healthcheck:" docker-compose.yml; then
            echo "❌ No health checks found in Docker Compose file"
            exit 1
          else
            echo "✅ Health checks configured"
          fi

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, docker-security-scan, secrets-scan, dependency-scan, configuration-scan, security-policy-check, compliance-check]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check job results
          if [ "${{ needs.vulnerability-scan.result }}" = "success" ]; then
            echo "✅ Vulnerability Scan: PASSED" >> security-report.md
          else
            echo "❌ Vulnerability Scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.docker-security-scan.result }}" = "success" ]; then
            echo "✅ Docker Security Scan: PASSED" >> security-report.md
          else
            echo "❌ Docker Security Scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.secrets-scan.result }}" = "success" ]; then
            echo "✅ Secrets Scan: PASSED" >> security-report.md
          else
            echo "❌ Secrets Scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ Dependency Scan: PASSED" >> security-report.md
          else
            echo "❌ Dependency Scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.configuration-scan.result }}" = "success" ]; then
            echo "✅ Configuration Scan: PASSED" >> security-report.md
          else
            echo "❌ Configuration Scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.security-policy-check.result }}" = "success" ]; then
            echo "✅ Security Policy Check: PASSED" >> security-report.md
          else
            echo "❌ Security Policy Check: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.compliance-check.result }}" = "success" ]; then
            echo "✅ Compliance Check: PASSED" >> security-report.md
          else
            echo "❌ Compliance Check: FAILED" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Regularly update Docker images to latest secure versions" >> security-report.md
          echo "- Monitor security advisories for dependencies" >> security-report.md
          echo "- Review and rotate credentials regularly" >> security-report.md
          echo "- Keep security documentation up to date" >> security-report.md
          
          cat security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
