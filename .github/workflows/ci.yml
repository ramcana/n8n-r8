name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, fix-sc2012-and-test-suite]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly security scans
    - cron: "0 2 * * 1"

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "18"

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('nodes/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking for package-lock.json in nodes directory:"
          ls -la nodes/package-lock.json
          cd nodes
          echo "Changed to directory: $(pwd)"
          npm ci

      - name: Lint shell scripts
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          echo "Running enhanced shellcheck validation with source path following..."

          # Set up source paths for shellcheck to follow includes
          export SHELLCHECK_OPTS="--source-path=tests/helpers:tests:scripts --external-sources"

          # Run shellcheck with enhanced options on project scripts only
          # -x: Follow source/include statements
          # --source-path: Specify directories to search for sourced files
          # --format: Use clear error format for CI
          # --severity: Include all severity levels for comprehensive checking
          find . -name "*.sh" -type f \
            -not -path "*/node_modules/*" \
            -not -path "*/nodes/node_modules/*" \
            -not -path "*/data/*" \
            -not -path "*/.git/*" \
            -not -path "*/logs/*" | \
            xargs shellcheck -x --source-path=tests/helpers:tests:scripts --format=gcc --severity=style

          if [ $? -eq 0 ]; then
            echo "✅ All shell scripts passed shellcheck validation"
          else
            echo "❌ Shellcheck validation failed - see errors above"
            echo "Please fix the shellcheck issues before merging"
            exit 1
          fi

      - name: Validate Docker Compose files
        run: |
          # Set up environment for validation
          cp .env.example .env
          sed -i 's/changeme123!/test_password_123!/g' .env
          sed -i 's/change-this-secure-password/test_secure_password!/g' .env
          sed -i 's/generate-32-character-key-here/test-encryption-key-32-characters/g' .env
          sed -i 's/generate-jwt-secret-here/test-jwt-secret-key/g' .env
          sed -i 's/N8N_HOST=localhost/N8N_HOST=n8n.localhost/g' .env
          sed -i 's/TRAEFIK_DASHBOARD_HOST=traefik.localhost/TRAEFIK_DASHBOARD_HOST=traefik-dashboard.localhost/g' .env
          sed -i 's|WEBHOOK_URL=http://localhost:5678/|WEBHOOK_URL=http://n8n.localhost/|g' .env

          echo "" >> .env
          echo "# CI Validation Overrides" >> .env
          echo "POSTGRES_DB=n8n_test" >> .env
          echo "POSTGRES_USER=n8n_test" >> .env
          echo "REDIS_DB=0" >> .env
          echo "N8N_LOG_LEVEL=info" >> .env

          # Validate all Docker Compose configurations
          echo "Validating basic configuration..."
          docker compose -f docker-compose.yml config --quiet

          echo "Validating Nginx configuration..."
          docker compose -f docker-compose.yml -f docker-compose.nginx.yml config --quiet

          echo "Validating Traefik configuration..."
          docker compose -f docker-compose.yml -f docker-compose.traefik.yml config --quiet

          echo "Validating monitoring configuration..."
          docker compose -f docker-compose.monitoring.yml config --quiet

          echo "✅ All Docker Compose files validated successfully"

      - name: Lint JavaScript/TypeScript
        run: |
          cd nodes
          npm run lint || echo "Linting completed with warnings/errors"

      - name: Check formatting
        run: |
          cd nodes
          npm run format:check || echo "Formatting check completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-ci-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0" # Don't fail the build on vulnerabilities
          vuln-type: "os,library"
          scanners: "vuln"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: "trivy-ci-results.sarif"

      - name: Scan Docker images for vulnerabilities
        run: |
          # Pull and scan main images (using versions from docker-compose.yml)
          docker pull n8nio/n8n:1.111.1
          docker pull postgres:16-alpine
          docker pull redis:7.4.1-alpine3.20
          docker pull nginx:1.27.2-alpine3.20
          docker pull traefik:v3.1.6

          # Scan with Trivy (continue on error to not fail the build)
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL n8nio/n8n:1.111.1 || echo "N8N scan completed with issues"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL postgres:16-alpine || echo "Postgres scan completed with issues"

      - name: Check for secrets
        if: github.event.before != github.sha
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          extra_args: --only-verified --no-update

      - name: Skip TruffleHog if no new commits
        if: github.event.before == github.sha
        run: echo "Skipping TruffleHog scan - base and head commits are identical."

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan]
    strategy:
      matrix:
        deployment: [basic, nginx, traefik, monitoring]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up environment
        run: |
          cp .env.example .env
          # Set test credentials and required variables
          sed -i 's/changeme123!/test_password_123!/g' .env
          sed -i 's/change-this-secure-password/test_secure_password!/g' .env
          sed -i 's/generate-32-character-key-here/test-encryption-key-32-characters/g' .env
          sed -i 's/generate-jwt-secret-here/test-jwt-secret-key/g' .env

          # Set host configuration for Traefik routing
          sed -i 's/N8N_HOST=localhost/N8N_HOST=n8n.localhost/g' .env
          sed -i 's/TRAEFIK_DASHBOARD_HOST=traefik.localhost/TRAEFIK_DASHBOARD_HOST=traefik-dashboard.localhost/g' .env
          sed -i 's|WEBHOOK_URL=http://localhost:5678/|WEBHOOK_URL=http://n8n.localhost/|g' .env

          # Ensure required database variables are set
          echo "" >> .env
          echo "# CI Test Overrides" >> .env
          echo "POSTGRES_DB=n8n_test" >> .env
          echo "POSTGRES_USER=n8n_test" >> .env
          echo "REDIS_DB=0" >> .env
          echo "N8N_LOG_LEVEL=debug" >> .env
          echo "N8N_DIAGNOSTICS_ENABLED=false" >> .env
          echo "N8N_VERSION_NOTIFICATIONS_ENABLED=false" >> .env
          echo "N8N_TEMPLATES_ENABLED=false" >> .env
          echo "N8N_ONBOARDING_FLOW_DISABLED=true" >> .env

      - name: Create external Docker network if not exists
        run: docker network create n8n-network || true

      - name: Build custom nodes for deployment tests
        run: |
          cd nodes
          npm ci
          npm run build

      - name: Test basic deployment
        if: matrix.deployment == 'basic'
        run: |
          echo "Starting basic deployment..."
          docker compose up -d

          echo "Waiting for services to become healthy..."
          for i in {1..20}; do
            echo "Health check attempt $i..."
            docker compose ps
            n8n_health=$(docker inspect --format='{{.State.Health.Status}}' n8n)
            postgres_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-postgres)
            redis_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-redis)
            echo "n8n status: $n8n_health"
            echo "postgres status: $postgres_health"
            echo "redis status: $redis_health"
            if [ "$n8n_health" = "healthy" ] && [ "$postgres_health" = "healthy" ] && [ "$redis_health" = "healthy" ]; then
              echo "All services are healthy!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "Services did not become healthy in time."
              docker compose logs
              exit 1
            fi
            sleep 15
          done

          echo "Running health check script..."
          ./scripts/health-check.sh

          echo "Tearing down the environment..."
          docker compose down -v

      - name: Test Nginx deployment
        if: matrix.deployment == 'nginx'
        run: |
          echo "🚀 Starting Nginx deployment test..."

          # Override N8N_HOST for nginx deployment (n8n should be accessible via nginx)
          sed -i 's/N8N_HOST=n8n.localhost/N8N_HOST=localhost/g' .env
          sed -i 's|WEBHOOK_URL=http://n8n.localhost/|WEBHOOK_URL=http://localhost/|g' .env

          docker compose -f docker-compose.yml -f docker-compose.nginx.yml up -d

          echo "Waiting for services to become healthy..."
          for i in {1..20}; do
            echo "Health check attempt $i..."
            docker compose -f docker-compose.yml -f docker-compose.nginx.yml ps
            n8n_health=$(docker inspect --format='{{.State.Health.Status}}' n8n)
            postgres_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-postgres)
            redis_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-redis)
            nginx_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-nginx)
            echo "n8n status: $n8n_health"
            echo "postgres status: $postgres_health"
            echo "redis status: $redis_health"
            echo "nginx status: $nginx_health"
            if [ "$n8n_health" = "healthy" ] && [ "$postgres_health" = "healthy" ] && [ "$redis_health" = "healthy" ] && [ "$nginx_health" = "healthy" ]; then
              echo "All services are healthy!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "Services did not become healthy in time."
              docker compose -f docker-compose.yml -f docker-compose.nginx.yml logs
              exit 1
            fi
            sleep 15
          done

          echo "Testing nginx proxy to n8n healthz endpoint..."
          curl -f http://localhost/healthz || exit 1

          echo "Tearing down the environment..."
          docker compose -f docker-compose.yml -f docker-compose.nginx.yml down -v

      - name: Test Traefik deployment
        if: matrix.deployment == 'traefik'
        run: |
          docker compose -f docker-compose.yml -f docker-compose.traefik.yml up -d

          echo "Waiting for services to become healthy..."
          for i in {1..20}; do
            echo "Health check attempt $i..."
            docker compose -f docker-compose.yml -f docker-compose.traefik.yml ps
            n8n_health=$(docker inspect --format='{{.State.Health.Status}}' n8n)
            postgres_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-postgres)
            redis_health=$(docker inspect --format='{{.State.Health.Status}}' n8n-redis)
            traefik_health=$(docker inspect --format='{{.State.Health.Status}}' traefik)
            echo "n8n status: $n8n_health"
            echo "postgres status: $postgres_health"
            echo "redis status: $redis_health"
            echo "traefik status: $traefik_health"
            if [ "$n8n_health" = "healthy" ] && [ "$postgres_health" = "healthy" ] && [ "$redis_health" = "healthy" ] && [ "$traefik_health" = "healthy" ]; then
              echo "All services are healthy!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "Services did not become healthy in time."
              docker compose -f docker-compose.yml -f docker-compose.traefik.yml logs
              exit 1
            fi
            sleep 15
          done

          echo "Testing Traefik dashboard..."
          curl -f http://localhost:8080/ping || exit 1

          echo "Tearing down the environment..."
          docker compose -f docker-compose.yml -f docker-compose.traefik.yml down -v

      - name: Test monitoring deployment
        if: matrix.deployment == 'monitoring'
        run: |
          mkdir -p monitoring/data/{prometheus,grafana,loki,alertmanager,uptime-kuma}
          chmod -R 777 monitoring/data/ || echo "Permission setup completed"

          docker compose -f docker-compose.monitoring.yml up -d

          echo "Waiting for monitoring services to start..."
          sleep 90

          docker compose -f docker-compose.monitoring.yml ps

          curl -f http://localhost:9090/-/healthy || curl -f http://localhost:3100/ready || exit 1

          echo "Tearing down the environment..."
          docker compose -f docker-compose.monitoring.yml down -v

      - name: Cleanup
        if: always()
        run: |
          rm -f .env

  build-custom-nodes:
    name: Build Custom Nodes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "18"

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('nodes/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking for package-lock.json in nodes directory:"
          ls -la nodes/package-lock.json
          cd nodes
          echo "Changed to directory: $(pwd)"
          npm ci

      - name: Build custom nodes
        run: |
          cd nodes
          npm run build

      - name: Test custom nodes
        run: |
          cd nodes
          npm test || echo "Tests completed with issues - continuing build"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: custom-nodes-dist
          path: nodes/dist/
          retention-days: 7

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test-deployment]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up environment
        run: |
          cp .env.example .env
          sed -i 's/changeme123!/test_password_123!/g' .env
          sed -i 's/change-this-secure-password/test_secure_password!/g' .env
          sed -i 's/generate-32-character-key-here/test-encryption-key-32-characters/g' .env
          sed -i 's/generate-jwt-secret-here/test-jwt-secret-key/g' .env

          echo "" >> .env
          echo "# Performance Test Overrides" >> .env
          echo "POSTGRES_DB=n8n_test" >> .env
          echo "POSTGRES_USER=n8n_test" >> .env

      - name: Start N8N
        run: |
          docker compose up -d
          sleep 30

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Create basic performance test
          cat > perf-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';

          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 10 },
              { duration: '30s', target: 0 },
            ],
          };

          export default function() {
            let response = http.get('http://localhost:5678/healthz');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
          }
          EOF

          k6 run perf-test.js

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          rm -f .env

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      [lint-and-validate, security-scan, test-deployment, build-custom-nodes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Generate new version (simple increment for now)
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          else
            NEW_VERSION="v1.0.0"
          fi

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}

            ### Added
            - Automated release from CI/CD pipeline

            ### Security
            - All security scans passed
            - Docker images scanned for vulnerabilities

            ### Testing
            - All deployment configurations tested
            - Performance tests completed

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      [lint-and-validate, security-scan, test-deployment, build-custom-nodes]
    if: always()
    steps:
      - name: Notify on success
        if: needs.lint-and-validate.result == 'success' && needs.security-scan.result == 'success' && needs.test-deployment.result == 'success' && needs.build-custom-nodes.result == 'success'
        run: |
          echo "✅ All CI/CD checks passed successfully!"

      - name: Notify on failure
        if: needs.lint-and-validate.result == 'failure' || needs.security-scan.result == 'failure' || needs.test-deployment.result == 'failure' || needs.build-custom-nodes.result == 'failure'
        run: |
          echo "❌ CI/CD pipeline failed. Check the logs for details."
          echo "Job results:"
          echo "  - lint-and-validate: ${{ needs.lint-and-validate.result }}"
          echo "  - security-scan: ${{ needs.security-scan.result }}"
          echo "  - test-deployment: ${{ needs.test-deployment.result }}"
          echo "  - build-custom-nodes: ${{ needs.build-custom-nodes.result }}"
          exit 1

      - name: Notify on partial completion
        if: |
          (needs.lint-and-validate.result == 'success' || needs.lint-and-validate.result == 'skipped') &&
          (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
          (needs.test-deployment.result == 'success' || needs.test-deployment.result == 'skipped') &&
          (needs.build-custom-nodes.result == 'success' || needs.build-custom-nodes.result == 'skipped') &&
          !(needs.lint-and-validate.result == 'success' && needs.security-scan.result == 'success' && needs.test-deployment.result == 'success' && needs.build-custom-nodes.result == 'success')
        run: |
          echo "⚠️  CI/CD pipeline completed with some jobs skipped."
          echo "Job results:"
          echo "  - lint-and-validate: ${{ needs.lint-and-validate.result }}"
          echo "  - security-scan: ${{ needs.security-scan.result }}"
          echo "  - test-deployment: ${{ needs.test-deployment.result }}"
          echo "  - build-custom-nodes: ${{ needs.build-custom-nodes.result }}"
