version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-dev
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-false}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GENERIC_TIMEZONE=${TIMEZONE:-UTC}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_JWT_SECRET}
      - N8N_SECURE_COOKIE=false
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      # Development-specific settings
      - NODE_ENV=development
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=debug
      - N8N_LOG_OUTPUT=console
      # Development debugging
      - N8N_DIAGNOSTICS_ENABLED=true
      - N8N_VERSION_NOTIFICATIONS_ENABLED=true
      - N8N_TEMPLATES_ENABLED=true
      - N8N_ONBOARDING_FLOW_DISABLED=false
      # Custom nodes development
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom
    volumes:
      - ./data/n8n:/home/node/.n8n
      - ../../nodes/dist:/home/node/.n8n/custom:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Development volume mounts
      - ./workflows:/home/node/.n8n/workflows
      - ./credentials:/home/node/.n8n/credentials
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - n8n-dev-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Exposed for development access
    networks:
      - n8n-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Development-friendly PostgreSQL settings
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB

  # Optional: Custom node development container
  n8n-node-dev:
    image: node:18-alpine
    container_name: n8n-node-dev
    working_dir: /workspace
    volumes:
      - ../../nodes:/workspace
      - node_modules_cache:/workspace/node_modules
    command: sh -c "npm install && npm run build:watch"
    profiles:
      - dev
    environment:
      - NODE_ENV=development
    networks:
      - n8n-dev-network

  # Optional: Database admin interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: n8n-pgadmin-dev
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    profiles:
      - admin
    networks:
      - n8n-dev-network
    depends_on:
      postgres:
        condition: service_healthy

  # Optional: Redis for testing queue functionality
  redis:
    image: redis:7-alpine
    container_name: n8n-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-devpassword}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    volumes:
      - ./data/redis:/data
    profiles:
      - queue
    networks:
      - n8n-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  n8n-dev-network:
    driver: bridge
    name: n8n-dev-network

volumes:
  node_modules_cache:
    driver: local
